import openai
import sqlite3
import re
import streamlit as st

openai.api_key = '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'
url = 'https://api.openai.com/v1/chat/completions'
headers = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {openai.api_key}"
}

def get_completion(messages, model='gpt-4-1106-preview'):    
    response = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        temperature=0.0,
    )

    return response.choices[0].message["content"]

expense_account = [
 {
  '报销单号':1,
  '报销说明':'在北京的会议费',
  '票据':[
   {
    '票据号': 1,
    '票据类型':'飞机票',
    '日期':'2023年3月1日',
    '金额':2000,
    '备注':'上海到北京的往返机票'
   },
    {
    '票据号': 2,
    '票据类型':'增值税发票',
    '日期':'2023年3月3日',
    '金额':1500,
    '备注':'在北京住宿费 3月1日至3月3日'
   },
    {
    '票据号': 3,
    '票据类型':'增值税发票',
    '日期':'2023年3月1日',
    '金额':150,
    '备注':'一日三餐费'
   },
  ]
 },
  {
  '报销单号':2,
  '报销说明':'在北京的招待费',
  '票据':[
   {
    '票据号': 1,
    '票据类型':'增值税发票',
    '日期':'2023年3月1日',
    '金额':1000,
    '备注':'招待用白酒一瓶'
   },
    {
    '票据号': 2,
    '票据类型':'增值税发票',
    '日期':'2023年3月3日',
    '金额':1500,
    '备注':'招待8人总费用'
   },
    {
    '票据号': 3,
    '票据类型':'招待说明',
    '备注':'共招待八人'
   },
  ]
 },
 {
  '报销单号': 3,
  '报销说明':'去北京出差花费',
  '票据':[
   {
    '票据号': 1,
    '票据类型': '增值税发票',
    '日期': '2023年3月1日',
    '金额':4000,
    '备注': '手机'
   },
   {
    '票据号': 2,
    '票据类型': '飞机票',
    '日期': '2023年3月2日',
    '金额': 2000,
    '备注': '北京到上海飞机票'
   },
   {
    '票据号': 3,
    '票据类型':'增值税发票',
    '日期':' 2023年3月3日',
    '金额': 1000,
    '备注': '上海3月1日到3月3日住宿费'
   },
   {
    '票据号': 4,
    '票据类型':'会议通知',
    '备注':'2023年3月2日到3月5日，在北京召开人工智能大会'
   }
  ]
 },
  {
  '报销单号': 4,
  '报销说明':'在上海招待费',
  '票据':[
   {
    '票据号': 1,
    '票据类型': '增值税发票',
    '日期': '2023年3月1日',
    '金额':4000,
    '备注': '红酒两瓶'
   },
   {
    '票据号': 2,
    '票据类型': '飞机票',
    '日期': '2023年3月2日',
    '金额': 2000,
    '备注': '招待4位外宾总费用'
   },
   {
    '票据号': 3,
    '票据类型':'增值税发票',
    '日期':' 2023年3月3日',
    '金额': 1000,
    '备注': 'KTV费用'
   }
  ]
 },
   {
  '报销单号': 5,
  '报销说明':'办公用品费',
  '票据':[
   {
    '票据号': 1,
    '票据类型': '增值税发票',
    '日期': '2023年3月1日',
    '金额':4000,
    '备注': '打印机一台'
   },
   {
    '票据号': 2,
    '票据类型': '增值税发票',
    '日期': '2023年3月2日',
    '金额': 2000,
    '备注': '显示屏一台'
   },
   {
    '票据号': 3,
    '票据类型':'增值税发票',
    '日期':' 2023年3月3日',
    '金额': 500,
    '备注': '零食'
   },
    {
    '票据号': 4,
    '票据类型':'增值税发票',
    '日期':' 2023年3月3日',
    '金额': 500,
    '备注': '游戏机一台'
   }
  ]
 },
   {
  '报销单号': 6,
  '报销说明':'去长沙差旅费',
  '票据':[
   {
    '票据号': 1,
    '票据类型': '增值税发票',
    '日期': '2023年3月1日',
    '金额':1000,
    '备注': '长沙住宿费 两晚'
   },
   {
    '票据号': 2,
    '票据类型': '增值税发票',
    '日期': '2023年3月2日',
    '金额': 100,
    '备注': '洗衣费'
   },
   {
    '票据号': 3,
    '票据类型':'飞机票',
    '日期':' 2023年3月3日',
    '金额': 800,
    '备注': '上海到长沙飞机票 单程'
   },
   {
    '票据号': 4,
    '票据类型':'报销说明',
    '备注':'仅有单程费用'
   }
  ]
 },
]

st.title("数据查询助手")
query = st.text_input("你的问题是：")

conn = st.connection('accounts_db', type='sql')
with conn.session as s:
    if st.button("发送") and query:
        messages = [
            {'role': 'system', 'content': '''你是一位能力很强的数据库查询员，你的任务是根据用户的问题返回mysql数据库查询语句。
            数据库的格式如下：r_id对应了报销单号，description对应了报销说明，receipt_id对应了票据号，receipt_type对应了票据类型，date对应了日期，amount对应了金额，notes对应了备注。
            当你需要确定询问的具体内容时，只需要在notes里出现过该内容即可，比如我想查询有关于白酒的报销单，只需要在notes里出现过白酒一次即可。
            我的表格名字为reimbursement_receipts，在输出结果，请你只输出代码，不要包含其他任何内容。'''},
            {'role': 'user', 'content': f'问题如下：{query}'}
        ]

        response = get_completion(messages)
        pattern = r"```sql\n(.+);\n```"
        match = re.search(pattern, response, re.DOTALL)
        sql_command = match.group(1)

        data = conn.query(sql_command)

        messages = [
            {'role': 'system', 'content': '''你是一位能力很强的客服，你的任务是根据用户的问题和输入的数据进行回答。
            输入内容会是一些数据，代表对于用户的问题的回答，请你自己理解该数据的含义，然后根据用户的问题进行回答。'''},
            {'role': 'user', 'content': f'用户问题如下：{query}'},
            {'role': 'user', 'content': f'输入数据如下：{data}'}
        ]

        response = get_completion(messages)
        st.write(response)
